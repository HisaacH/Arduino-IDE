/*******************************************************
  SD 引脚：GPIO26 -> CS  GPIO14 -> MOSI（DI） GPIO12 -> MISO（DO） GPIO27 - SCK 
*******************************************************/
/*******************************************************
  读取松下激光测距传感器的距离数据通过LoRa传输给模拟网关
*******************************************************/
#include <Wire.h>
#include <SPI.h> 
#include <mySD.h>
#include <Adafruit_ADS1015.h>
#include <dummy.h>
#include <HardwareSerial.h>  

#define Lora_AT 32
#define LED_BUILTIN 33  

void Adc1115(void *pvParameters);  
void WatchDog(void *pvParameters); 
void SD_CARD(void *pvParameters); 
void Lora_peizhi();


//boolean lora_received=false;
unsigned long LoraOldtime;
unsigned long NewTime;

Adafruit_ADS1115 ads;
HardwareSerial MySerial(1);
File root;

void setup() 
{    
  Serial.begin(115200);
  MySerial.begin(115200, SERIAL_8N1, 16, 17);
  Lora_peizhi();
  pinMode(Lora_AT, OUTPUT); pinMode(33, INPUT); 
  ads.setGain(GAIN_TWOTHIRDS);  // 2/3x gain +/- 6.144V  1 bit = 3mV      0.1875mV (default)   
  ads.begin();
  
  Serial.print("Initializing SD card...");
  /*初始化SD库SPI引脚*/ 
  if (!SD.begin(26, 14, 32, 27)) {
    Serial.println("initialization failed!");
    return;
  }
  Serial.println("initialization done.");

  
/*******************************************************
  创建多个任务
*******************************************************/
  
  xTaskCreatePinnedToCore(
    Adc1115,
    "Adc1115",   // A name just for humans
    4096,  // This stack size can be checked & adjusted by reading the Stack Highwater
    NULL,
    2,  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
    NULL ,
    0 
  );
     
  xTaskCreatePinnedToCore(
    WatchDog,
    "WatchDog",   // A name just for humans
    1024,  // This stack size can be checked & adjusted by reading the Stack Highwater
    NULL,
    2,  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
    NULL ,
    1
    );
    // Now the task scheduler, which takes over control of scheduling individual tasks, is automatically started.
  
  xTaskCreatePinnedToCore(
    SD_CARD,
    "SD_CARD",   // A name just for humans
    1024,  // This stack size can be checked & adjusted by reading the Stack Highwater
    NULL,
    1,  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
    NULL ,
    1 
   );

    xTaskCreatePinnedToCore(
    Lora_connect,
    "Lora_connect",   // A name just for humans
    1024,  // This stack size can be checked & adjusted by reading the Stack Highwater
    NULL,
    1,  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
    NULL ,
    1 
   );
   
  Serial.println("end.....");
}
    
void loop()
  
{
  //所有程序在task中运行
}

void Lora_connect(void *pvParameters)  // This is a task.//判断lora是否连接
{  
  (void) pvParameters; 
  char Lora_receive[3]; 
  while(true){    
    if(MySerial.available()){
      Serial.print("lora_Receive... ");
      for(int i=0;i<3;i++)
      Lora_receive[i]=MySerial.read(); 
      delay(1);
      if(Lora_receive[i]='Y') {
         LoraOldtime=millis();
      }
    }
  }       
}  


void  Adc1115(void *pvParameters)  // This is a task.  //读取激光测距传感器的数据
{ 
  (void) pvParameters;  
  String taskMessage = "Task running on core ";
  taskMessage = taskMessage + xPortGetCoreID();     
  pinMode(LED_BUILTIN, OUTPUT);   
  
  for (;;) 
  {  
  int16_t adc0, adc1, adc2, adc3;

  float adc,adc4;
  adc0 = ads.readADC_SingleEnded(0);delay(50);
  adc1 = ads.readADC_SingleEnded(1);delay(50);
  adc2 = ads.readADC_SingleEnded(2);delay(50);
  adc3 = ads.readADC_SingleEnded(3);delay(50);
  Serial.println("jisuan...");
  
  adc=(adc0*1875);
  adc=(adc/10000000-2.5)*2;
  adc4=(adc1*1875);
  adc4=(adc4/10000000-2.5)*2;
  
  Serial.print("AIN0: "); Serial.println(adc0);
  Serial.print("AIN1: "); Serial.println(adc1);
  
   Serial.println("fasong");
  
  Serial.println(taskMessage);
  
  } 
}  
  
void WatchDog(void *pvParameters)  // This is a task.
{  
 (void) pvParameters;  
  while(true){
    String taskMessage = "Task running on core ";
    taskMessage = taskMessage + xPortGetCoreID();
    Serial.println(taskMessage); 
    Newtime=millis();  
  
    if (Newtime-LoraOldtime>30000) 
    {  
      //sd
      delay(500);
    }
    if()
    {
      digitalWrite(25,LOW);
    }
    delay(1000);
  } 
}

void SD_CARD(void *pvParameters)  // This is a task.  //断网数据存储至SD卡
{ 
  int16_t adc0, adc1, adc2, adc3;
  float adc,adc4; 
  //(void) pvParameters;
  Serial.println("SD_CARD");
  /*从根目录root“/”*/ 
  root = SD.open("/");
  if (root) 
  {    
    printDirectory(root, 0);
    root.close();
  } 
  else 
  {
    Serial.println("error opening test.txt");
  }//显示文件目录
  while(true){
    if()
      {
        char msg[100];
        root = SD.open("huancun.txt", FILE_WRITE);
        /*如果成功打开 - > root！= NULL 然后写字符串“Hello world！”*/ 
        if (root) 
          {
          adc0 = ads.readADC_SingleEnded(0);delay(50);
          adc1 = ads.readADC_SingleEnded(1);delay(50);
          adc=(adc0*1875);
          adc=(adc/10000000-2.5)*2;
          adc4=(adc1*1875);
          adc4=(adc4/10000000-2.5)*2;
          snprintf (msg,100, "{\"distancetest1\":%.2f,\"distancetest2\":%.2f,\"distancesum\":%.2f},",adc,adc4,adc+adc4);
          root.println(msg);root.println("hei");
          root.flush();
           /*关闭文件 */
          root.close();
          } 
          else 
          {
            Serial.println("error opening test.txt");/* 如果文件打开错误，则打印错误 */
          }
    //SD卡存储数据 
      } 
  Serial.println("SD_CARD111"); 
  delay(1000);
  } 
}

void Lora_peizhi(){
   digitalWrite(Lora_AT,HIGH);
   MySerial.write("AT/r/n");
   delay(10);
   MySerial.write("AT+NET=00/r/n");
   delay(10);
   MySerial.write("AT+TFREQ=19CF0E40/r/n");//433mhz
   delay(10);
   MySerial.write("AT+RFREQ=1C12E3C0/r/n");//471mhz
   delay(10);
   MySerial.write("AT+RIQ=00/r/n");
   delay(10);
   MySerial.write("AT+AK=11223344556677889900112233445566/r/n");//配置加密秘钥
   delay(10);
   digitalWrite(Lora_AT,LOW);
   delay(10);
  }
 
void printDirectory(File dir, int numTabs) //显示SD卡内的数据
{
  // Begin at the start of the directory
  dir.rewindDirectory();
  
  while(true) {
    File entry =  dir.openNextFile();
    if (! entry) {
       // no more files
       Serial.println("**nomorefiles**");
       break;
     }
     for (uint8_t i=0; i<numTabs; i++) {
       Serial.print('\t');   // we'll have a nice indentation
     }
     // Print the 8.3 name
     Serial.print(entry.name());
     // Recurse for directories, otherwise print the file size
     if (entry.isDirectory()) {
       Serial.println("/");
       printDirectory(entry, numTabs+1);
     } else {
       // files have sizes, directories do not
       Serial.print("\t\t");
       Serial.println(entry.size(), DEC);
     }
     entry.close();
   }
}
